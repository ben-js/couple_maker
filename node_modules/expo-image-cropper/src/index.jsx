import { useCallback, useEffect } from "react";
import { StyleSheet, View, StatusBar, Modal } from "react-native";
import { ControlBar } from "./ControlBar";
import { EditingWindow } from "./EditingWindow";
import * as ImageManipulator from "expo-image-manipulator";
import { Processing } from "./Processing";
import { useRecoilState, RecoilRoot } from "recoil";
import {
  processingState,
  imageDataState,
  editingModeState,
  readyState,
  isEditState,
} from "./Store";
import { EditorContext } from "./context/editor";

function ImageEditorCore(props) {
  const {
    minimumCropDimensions = { width: 100, height: 100 },
    fixedAspectRatio = 0.66666666666,
    onEditingCancel = () => {},
    onEditingComplete = () => {},
    imageUri = null,
  } = props;
  const [imageData, setImageData] = useRecoilState(imageDataState);
  const [, setReady] = useRecoilState(readyState);
  const [, setEditingMode] = useRecoilState(editingModeState);
  const [, setProcessing] = useRecoilState(processingState);
  const [isEdit] = useRecoilState(isEditState);

  const initialise = useCallback(async () => {
    if (imageUri) {
      const { width: pickerWidth, height: pickerHeight } =
        await ImageManipulator.manipulateAsync(imageUri, []);

      setImageData({
        uri: imageUri,
        width: pickerWidth,
        height: pickerHeight,
      });

      setReady(true);
    }
  }, []);

  const onBackPress = () => {
    if (!isEdit) {
      onEditingCancel();
    } else {
      setProcessing(true);

      initialise().then(() => {
        setEditingMode("crop");
        setProcessing(false);
      });
    }
  };

  const onSave = () => {
    onEditingComplete(imageData);
  };

  useEffect(() => {
    initialise().catch(console.error);
  }, [imageUri]);

  return (
    <EditorContext.Provider
      value={{
        minimumCropDimensions,
        fixedAspectRatio,
        onBackPress,
        onSave,
        imageUri,
      }}
    >
      <StatusBar hidden={true} />
      <ImageEditorView />
    </EditorContext.Provider>
  );
}

export function ImageEditorView() {
  const [ready] = useRecoilState(readyState);
  const [processing] = useRecoilState(processingState);

  return (
    <>
      {ready ? (
        <View style={styles.container}>
          <ControlBar />
          <EditingWindow />
        </View>
      ) : null}
      {processing ? <Processing /> : null}
    </>
  );
}

export function ImageEditor(props) {
  return (
      <Modal visible={true} style={{ flex: 1, zIndex: 1 }}>
      <RecoilRoot>
        <ImageEditorCore {...props} />
      </RecoilRoot>
    </Modal>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#222",
  },
});
